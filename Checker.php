<?php declare(strict_types=1);namespace App;/** * Pangrams, anagrams and palindromes *  * Implement each of the functions of the Checker class.  * Aim to spend about 10 minutes on each function.  */class Checker{    /**     * A palindrome is a word, phrase, number, or other sequence of characters      * which reads the same backward or forward.     *     * @param string $word     * @return bool     */    public static function isPalindrome(string $word)    {        // sanitise for only letters        $word = Checker::sanitiseString($word);        // check if reversed word is still equal to unreversed word        return ( $word === strrev($word) );    }        /**     * An anagram is the result of rearranging the letters of a word or phrase      * to produce a new word or phrase, using all the original letters      * exactly once.     *      * @param string $word     * @param string $comparison     * @return bool     */    public static function isAnagram(string $word, string $comparison) : bool    {        // sanitise for only letters and convert word and comparison into arrays        $word =  str_split( Checker::sanitiseString($word) );        $comparison = str_split( Checker::sanitiseString($comparison) );        // if word and comparison do not have the same length return false        if( count($word) !== count($comparison) ) {            return false;        }        // loop through each letter in the word        foreach ( $word as $letter) {            //  if a letter in the word is not within its comparison return false            if( in_array($letter, $comparison) === false) {                return false;            }        }        return true;    }    /**     * A Pangram for a given alphabet is a sentence using every letter of the      * alphabet at least once.      *      * @param string $phrase     * @return bool     */        public static function isPangram(string $phrase) : bool    {        // declare an empty array        $alphabets = [];        // populate the empty array with all english alphabets        foreach ( range('a', 'z') as $letter ) {            $alphabets[] = $letter;        }        // sanitise the phrase and convert phrase into an array        $phrase = str_split( Checker::sanitiseString($phrase) );        // loop through each letter in the alphabets        foreach ( $alphabets as $alphabet ) {            // if an alphabet cannot be found in the phrase return false            if( in_array($alphabet, $phrase) === false ) {                return false;            }        }        return true;    }    /**     *  Trims string for only letters     *     * @param string $word     * @return string     */    public static function sanitiseString(string $word) : string    {        return strtolower( preg_replace("/[^a-zA-Z]/", "", $word) );    }}// correct return values for methods in the class Checkerecho "Correct return value for Check::isPalindrome('anna') " . "<br>";var_dump(Checker::isPalindrome('anna'));echo "Correct return value Check::isAnagram('coalface', 'cacao elf') " . "<br>";var_dump(Checker::isAnagram('coalface', 'cacao elf'));echo "Correct return value Checker::isPangram('The quick brown fox jumps over the lazy dog') " . "<br>";var_dump(Checker::isPangram('The quick brown fox jumps over the lazy dog'));echo '<br><br>';// wrong return values for methods in the class Checkerecho "Wrong return value for Check::isPalindrome('Bark') " . "<br>";var_dump(Checker::isPalindrome('Bark'));echo "Wrong return value Check::isAnagram('coalface', 'dark elf') " . "<br>";var_dump(Checker::isAnagram('coalface', 'dark elf'));echo "Wrong return value Checker::isPangram('The British Broadcasting Corporation (BBC) is a British public service broadcaster') " . "<br>";var_dump(Checker::isPangram('The British Broadcasting Corporation (BBC) is a British public service broadcaster'));